// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: todo.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TodoClient is the client API for Todo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TodoClient interface {
	// //////////// System RPCs //////////////
	//
	// Service RPCs exist to help with management of the Todo service. They
	// usually perform admin type interactions with the service as a whole and
	// provide ways for admins to quickly repair Todo broken states without
	// having to stop the entire service.
	GetSystemInfo(ctx context.Context, in *GetSystemInfoRequest, opts ...grpc.CallOption) (*GetSystemInfoResponse, error)
	// ListTasks returns all registered tasks.
	ListTasks(ctx context.Context, in *ListTasksRequest, opts ...grpc.CallOption) (*ListTasksResponse, error)
	// CreateTask creates a new task.
	CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*CreateTaskResponse, error)
	// GetTask returns a single task by id.
	GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*GetTaskResponse, error)
	// UpdateTask updates the details of a particular task by id.
	UpdateTask(ctx context.Context, in *UpdateTaskRequest, opts ...grpc.CallOption) (*UpdateTaskResponse, error)
	// DeleteTask removes a task by id.
	DeleteTask(ctx context.Context, in *DeleteTaskRequest, opts ...grpc.CallOption) (*DeleteTaskResponse, error)
	// ListScheduledTasks returns all registered scheduled tasks.
	ListScheduledTasks(ctx context.Context, in *ListScheduledTasksRequest, opts ...grpc.CallOption) (*ListScheduledTasksResponse, error)
	// CreateScheduledTask creates a scheduled new task.
	CreateScheduledTask(ctx context.Context, in *CreateScheduledTaskRequest, opts ...grpc.CallOption) (*CreateScheduledTaskResponse, error)
	// GetScheduledTask returns a single scheduled task by id.
	GetScheduledTask(ctx context.Context, in *GetScheduledTaskRequest, opts ...grpc.CallOption) (*GetScheduledTaskResponse, error)
	// UpdateScheduledTask updates the details of a particular scheduled task by id.
	UpdateScheduledTask(ctx context.Context, in *UpdateScheduledTaskRequest, opts ...grpc.CallOption) (*UpdateScheduledTaskResponse, error)
	// DeleteScheduledTask removes a scheduled task by id.
	DeleteScheduledTask(ctx context.Context, in *DeleteScheduledTaskRequest, opts ...grpc.CallOption) (*DeleteScheduledTaskResponse, error)
}

type todoClient struct {
	cc grpc.ClientConnInterface
}

func NewTodoClient(cc grpc.ClientConnInterface) TodoClient {
	return &todoClient{cc}
}

func (c *todoClient) GetSystemInfo(ctx context.Context, in *GetSystemInfoRequest, opts ...grpc.CallOption) (*GetSystemInfoResponse, error) {
	out := new(GetSystemInfoResponse)
	err := c.cc.Invoke(ctx, "/proto.Todo/GetSystemInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoClient) ListTasks(ctx context.Context, in *ListTasksRequest, opts ...grpc.CallOption) (*ListTasksResponse, error) {
	out := new(ListTasksResponse)
	err := c.cc.Invoke(ctx, "/proto.Todo/ListTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoClient) CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*CreateTaskResponse, error) {
	out := new(CreateTaskResponse)
	err := c.cc.Invoke(ctx, "/proto.Todo/CreateTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoClient) GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*GetTaskResponse, error) {
	out := new(GetTaskResponse)
	err := c.cc.Invoke(ctx, "/proto.Todo/GetTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoClient) UpdateTask(ctx context.Context, in *UpdateTaskRequest, opts ...grpc.CallOption) (*UpdateTaskResponse, error) {
	out := new(UpdateTaskResponse)
	err := c.cc.Invoke(ctx, "/proto.Todo/UpdateTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoClient) DeleteTask(ctx context.Context, in *DeleteTaskRequest, opts ...grpc.CallOption) (*DeleteTaskResponse, error) {
	out := new(DeleteTaskResponse)
	err := c.cc.Invoke(ctx, "/proto.Todo/DeleteTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoClient) ListScheduledTasks(ctx context.Context, in *ListScheduledTasksRequest, opts ...grpc.CallOption) (*ListScheduledTasksResponse, error) {
	out := new(ListScheduledTasksResponse)
	err := c.cc.Invoke(ctx, "/proto.Todo/ListScheduledTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoClient) CreateScheduledTask(ctx context.Context, in *CreateScheduledTaskRequest, opts ...grpc.CallOption) (*CreateScheduledTaskResponse, error) {
	out := new(CreateScheduledTaskResponse)
	err := c.cc.Invoke(ctx, "/proto.Todo/CreateScheduledTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoClient) GetScheduledTask(ctx context.Context, in *GetScheduledTaskRequest, opts ...grpc.CallOption) (*GetScheduledTaskResponse, error) {
	out := new(GetScheduledTaskResponse)
	err := c.cc.Invoke(ctx, "/proto.Todo/GetScheduledTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoClient) UpdateScheduledTask(ctx context.Context, in *UpdateScheduledTaskRequest, opts ...grpc.CallOption) (*UpdateScheduledTaskResponse, error) {
	out := new(UpdateScheduledTaskResponse)
	err := c.cc.Invoke(ctx, "/proto.Todo/UpdateScheduledTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoClient) DeleteScheduledTask(ctx context.Context, in *DeleteScheduledTaskRequest, opts ...grpc.CallOption) (*DeleteScheduledTaskResponse, error) {
	out := new(DeleteScheduledTaskResponse)
	err := c.cc.Invoke(ctx, "/proto.Todo/DeleteScheduledTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TodoServer is the server API for Todo service.
// All implementations must embed UnimplementedTodoServer
// for forward compatibility
type TodoServer interface {
	// //////////// System RPCs //////////////
	//
	// Service RPCs exist to help with management of the Todo service. They
	// usually perform admin type interactions with the service as a whole and
	// provide ways for admins to quickly repair Todo broken states without
	// having to stop the entire service.
	GetSystemInfo(context.Context, *GetSystemInfoRequest) (*GetSystemInfoResponse, error)
	// ListTasks returns all registered tasks.
	ListTasks(context.Context, *ListTasksRequest) (*ListTasksResponse, error)
	// CreateTask creates a new task.
	CreateTask(context.Context, *CreateTaskRequest) (*CreateTaskResponse, error)
	// GetTask returns a single task by id.
	GetTask(context.Context, *GetTaskRequest) (*GetTaskResponse, error)
	// UpdateTask updates the details of a particular task by id.
	UpdateTask(context.Context, *UpdateTaskRequest) (*UpdateTaskResponse, error)
	// DeleteTask removes a task by id.
	DeleteTask(context.Context, *DeleteTaskRequest) (*DeleteTaskResponse, error)
	// ListScheduledTasks returns all registered scheduled tasks.
	ListScheduledTasks(context.Context, *ListScheduledTasksRequest) (*ListScheduledTasksResponse, error)
	// CreateScheduledTask creates a scheduled new task.
	CreateScheduledTask(context.Context, *CreateScheduledTaskRequest) (*CreateScheduledTaskResponse, error)
	// GetScheduledTask returns a single scheduled task by id.
	GetScheduledTask(context.Context, *GetScheduledTaskRequest) (*GetScheduledTaskResponse, error)
	// UpdateScheduledTask updates the details of a particular scheduled task by id.
	UpdateScheduledTask(context.Context, *UpdateScheduledTaskRequest) (*UpdateScheduledTaskResponse, error)
	// DeleteScheduledTask removes a scheduled task by id.
	DeleteScheduledTask(context.Context, *DeleteScheduledTaskRequest) (*DeleteScheduledTaskResponse, error)
	mustEmbedUnimplementedTodoServer()
}

// UnimplementedTodoServer must be embedded to have forward compatible implementations.
type UnimplementedTodoServer struct {
}

func (UnimplementedTodoServer) GetSystemInfo(context.Context, *GetSystemInfoRequest) (*GetSystemInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystemInfo not implemented")
}
func (UnimplementedTodoServer) ListTasks(context.Context, *ListTasksRequest) (*ListTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTasks not implemented")
}
func (UnimplementedTodoServer) CreateTask(context.Context, *CreateTaskRequest) (*CreateTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTask not implemented")
}
func (UnimplementedTodoServer) GetTask(context.Context, *GetTaskRequest) (*GetTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTask not implemented")
}
func (UnimplementedTodoServer) UpdateTask(context.Context, *UpdateTaskRequest) (*UpdateTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTask not implemented")
}
func (UnimplementedTodoServer) DeleteTask(context.Context, *DeleteTaskRequest) (*DeleteTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTask not implemented")
}
func (UnimplementedTodoServer) ListScheduledTasks(context.Context, *ListScheduledTasksRequest) (*ListScheduledTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListScheduledTasks not implemented")
}
func (UnimplementedTodoServer) CreateScheduledTask(context.Context, *CreateScheduledTaskRequest) (*CreateScheduledTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateScheduledTask not implemented")
}
func (UnimplementedTodoServer) GetScheduledTask(context.Context, *GetScheduledTaskRequest) (*GetScheduledTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScheduledTask not implemented")
}
func (UnimplementedTodoServer) UpdateScheduledTask(context.Context, *UpdateScheduledTaskRequest) (*UpdateScheduledTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateScheduledTask not implemented")
}
func (UnimplementedTodoServer) DeleteScheduledTask(context.Context, *DeleteScheduledTaskRequest) (*DeleteScheduledTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteScheduledTask not implemented")
}
func (UnimplementedTodoServer) mustEmbedUnimplementedTodoServer() {}

// UnsafeTodoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TodoServer will
// result in compilation errors.
type UnsafeTodoServer interface {
	mustEmbedUnimplementedTodoServer()
}

func RegisterTodoServer(s grpc.ServiceRegistrar, srv TodoServer) {
	s.RegisterService(&Todo_ServiceDesc, srv)
}

func _Todo_GetSystemInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSystemInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServer).GetSystemInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Todo/GetSystemInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServer).GetSystemInfo(ctx, req.(*GetSystemInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Todo_ListTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServer).ListTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Todo/ListTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServer).ListTasks(ctx, req.(*ListTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Todo_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Todo/CreateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServer).CreateTask(ctx, req.(*CreateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Todo_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServer).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Todo/GetTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServer).GetTask(ctx, req.(*GetTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Todo_UpdateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServer).UpdateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Todo/UpdateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServer).UpdateTask(ctx, req.(*UpdateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Todo_DeleteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServer).DeleteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Todo/DeleteTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServer).DeleteTask(ctx, req.(*DeleteTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Todo_ListScheduledTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListScheduledTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServer).ListScheduledTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Todo/ListScheduledTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServer).ListScheduledTasks(ctx, req.(*ListScheduledTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Todo_CreateScheduledTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateScheduledTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServer).CreateScheduledTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Todo/CreateScheduledTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServer).CreateScheduledTask(ctx, req.(*CreateScheduledTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Todo_GetScheduledTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScheduledTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServer).GetScheduledTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Todo/GetScheduledTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServer).GetScheduledTask(ctx, req.(*GetScheduledTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Todo_UpdateScheduledTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateScheduledTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServer).UpdateScheduledTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Todo/UpdateScheduledTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServer).UpdateScheduledTask(ctx, req.(*UpdateScheduledTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Todo_DeleteScheduledTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteScheduledTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServer).DeleteScheduledTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Todo/DeleteScheduledTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServer).DeleteScheduledTask(ctx, req.(*DeleteScheduledTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Todo_ServiceDesc is the grpc.ServiceDesc for Todo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Todo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Todo",
	HandlerType: (*TodoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSystemInfo",
			Handler:    _Todo_GetSystemInfo_Handler,
		},
		{
			MethodName: "ListTasks",
			Handler:    _Todo_ListTasks_Handler,
		},
		{
			MethodName: "CreateTask",
			Handler:    _Todo_CreateTask_Handler,
		},
		{
			MethodName: "GetTask",
			Handler:    _Todo_GetTask_Handler,
		},
		{
			MethodName: "UpdateTask",
			Handler:    _Todo_UpdateTask_Handler,
		},
		{
			MethodName: "DeleteTask",
			Handler:    _Todo_DeleteTask_Handler,
		},
		{
			MethodName: "ListScheduledTasks",
			Handler:    _Todo_ListScheduledTasks_Handler,
		},
		{
			MethodName: "CreateScheduledTask",
			Handler:    _Todo_CreateScheduledTask_Handler,
		},
		{
			MethodName: "GetScheduledTask",
			Handler:    _Todo_GetScheduledTask_Handler,
		},
		{
			MethodName: "UpdateScheduledTask",
			Handler:    _Todo_UpdateScheduledTask_Handler,
		},
		{
			MethodName: "DeleteScheduledTask",
			Handler:    _Todo_DeleteScheduledTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "todo.proto",
}
